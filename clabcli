#!/usr/bin/env python3

import sys
import requests
import getpass
import os
import random
import string
import json
import ipaddress
import subprocess

def get_user_config_path():
    """获取shadowdesk配置文件路径"""
    home_dir = os.path.expanduser("~")
    config_dir = os.path.join(home_dir, ".config", "shadowdesk")
    if not os.path.exists(config_dir):
        os.makedirs(config_dir)
    return os.path.join(config_dir, "shadowdesk.env")
    
def generate_password():
    """生成随机密码：@Clab1加8位随机数字和字母"""
    chars = string.ascii_letters + string.digits
    random_part = ''.join(random.choice(chars) for _ in range(9))
    return f"@Clab1{random_part}"

def modify_shadowdesk_config(user_id, password):
    """修改shadowdesk配置文件"""
    
    # 保存用户名和密码到用户家目录
    home_dir = os.path.expanduser("~")
    with open(os.path.join(home_dir, "rd_password"), 'w') as f:
        f.write(f"用户名: {user_id}\n密码: {password}\n")
        
    config_path = get_user_config_path()
    
    # 检查文件是否存在
    if not os.path.exists(config_path):
        print(f"警告: 配置文件 {config_path} 不存在")
        print(f"账号: {user_id}")
        print(f"密码: {password}")
        return True
    
    try:
        # 读取配置文件
        with open(config_path, 'r') as f:
            content = f.read()        
        
        # 替换用户名和密码
        content = content.replace("REPLACE_ME_SHADOWDESK_USER_NAME", f"USER_ID={user_id}")
        content = content.replace("REPLACE_ME_SHADOWDESK_USER_PASSWORD", f"USER_PASSWORD={password}")
        
        # 写回配置文件
        with open(config_path, 'w') as f:
            f.write(content)
            
        os.system("sudo systemctl enable --now shadowxvfb@98 shadowgnome@98 shadowdesk@98")
        
        return True
    except Exception as e:
        print(f"修改配置文件时出错: {e}")
        print(f"账号: {user_id}")
        print(f"密码: {password}")
        return False

def detect_os():
    """检测操作系统，返回发行版和版本号"""
    if os.path.exists('/etc/os-release'):
        with open('/etc/os-release', 'r') as f:
            lines = f.readlines()
        for line in lines:
            if line.startswith('ID='):
                distro = line.split('=')[1].strip().strip('"')
            elif line.startswith('VERSION_ID='):
                version = line.split('=')[1].strip().strip('"')
        return distro, version
    else:
        return None, None
    

def fetch_eda_config(eda_name):
    """从 clab-notice.lcpu.dev 获取 EDA 配置"""
    config_url = f"http://clab-notice.lcpu.dev/eda/{eda_name}.json"
    try:
        response = requests.get(config_url, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"课程不存在, {e}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"解析 EDA 配置 JSON 失败: {e}")
        sys.exit(1)
        

def check_network_segment(required_cidr):
    """检查当前主机是否在要求的网段内"""
    try:
        required_network = ipaddress.ip_network(required_cidr, strict=False)
        
        # 获取本机所有网络接口的 IP 地址
        result = subprocess.run(['ip', 'addr', 'show'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode != 0:
            print("无法获取网络接口信息")
            return False
        
        # 解析 IP 地址 (decode bytes to string for Python 3.6 compatibility)
        stdout_text = result.stdout.decode('utf-8') if isinstance(result.stdout, bytes) else result.stdout
        lines = stdout_text.split('\n')
        for line in lines:
            line = line.strip()
            if 'inet ' in line and not line.startswith('inet 127.'):
                # 提取 IP 地址
                ip_part = line.split('inet ')[1].split('/')[0]
                try:
                    host_ip = ipaddress.ip_address(ip_part)
                    if host_ip in required_network:
                        print(f"找到匹配的网络接口: {ip_part} 在网段 {required_cidr} 内")
                        return True
                except ValueError:
                    continue
        
        print(f"当前主机不在要求的网段 {required_cidr} 内")
        return False
    except ValueError as e:
        print(f"无效的网段格式 {required_cidr}: {e}")
        return False

def generate_systemd_unit(eda_name, config):
    """生成 systemd 单元文件内容"""
    nfs_server = config.get('nfs_server', '')
    nfs_mounts = config.get('nfs_mounts', [])
    
    if not nfs_server:
        print("配置文件中缺少 nfs_server 字段")
        sys.exit(1)
    
    if not nfs_mounts:
        print("配置文件中缺少 nfs_mounts 字段")
        sys.exit(1)
    
    # 生成 ExecStart 命令
    exec_start_commands = []
    exec_stop_commands = []
    
    for mount in nfs_mounts:
        source = mount.get('source', '')
        target = mount.get('target', '')
        options = mount.get('options', 'defaults,_netdev,soft,intr')
        
        if not source or not target:
            print(f"挂载配置不完整: {mount}")
            continue
        
        # 创建挂载点并挂载
        mount_cmd = f"mkdir -p {target} && mount -t nfs {nfs_server}:{source} {target} -o {options}"
        exec_start_commands.append(f"ExecStart=/bin/bash -c '{mount_cmd}'")
        
        # 卸载命令
        umount_cmd = f"umount {target} || true"
        exec_stop_commands.append(f"ExecStop=/bin/bash -c '{umount_cmd}'")
    
    # 生成完整的 systemd 单元内容
    unit_content = f"""[Unit]
Description=Mount EDA NFS shares for {eda_name}
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
RemainAfterExit=yes
{chr(10).join(exec_start_commands)}
{chr(10).join(exec_stop_commands)}
TimeoutStartSec=30

[Install]
WantedBy=multi-user.target
"""
    
    return unit_content

def verify_mounts(nfs_mounts):
    """验证挂载是否成功"""
    all_mounted = True
    for mount in nfs_mounts:
        target = mount.get('target', '')
        if not target:
            continue
        
        # 检查是否为挂载点
        result = subprocess.run(['mountpoint', '-q', target], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode == 0:
            print(f"✓ {target} 挂载成功")
        else:
            print(f"✗ {target} 挂载失败")
            all_mounted = False
    
    return all_mounted

def get_uid_1000_user():
    """获取 UID 1000 的用户信息"""
    try:
        import pwd
        user_info = pwd.getpwuid(1000)
        return user_info.pw_name, user_info.pw_dir
    except KeyError:
        print("未找到 UID 1000 的用户")
        return None, None
    except Exception as e:
        print(f"获取用户信息失败: {e}")
        return None, None

def download_and_append_bashrc(eda_name):
    """下载远程 .bashrc 内容并附加到 UID 1000 用户的 .bashrc 中"""
    # 构建 bashrc URL，将 .json 替换为 .bashrc
    bashrc_url = f"http://clab-notice.lcpu.dev/eda/{eda_name}.bashrc"
    
    # 获取 UID 1000 用户信息
    username, home_dir = get_uid_1000_user()
    if not username or not home_dir:
        print("无法获取 UID 1000 用户信息，跳过 .bashrc 配置")
        return False
    
    print(f"找到用户: {username}, 家目录: {home_dir}")
    
    try:
        # 下载远程 .bashrc 内容
        print(f"正在从 {bashrc_url} 下载 .bashrc 内容...")
        response = requests.get(bashrc_url, timeout=10)
        
        # 如果是 404，说明没有 bashrc 文件，这是正常的
        if response.status_code == 404:
            print("远程没有 .bashrc 文件，跳过配置")
            return True
        
        response.raise_for_status()
        remote_bashrc_content = response.text
        
        if not remote_bashrc_content.strip():
            print("远程 .bashrc 内容为空，跳过配置")
            return True
        
        # 目标 .bashrc 文件路径
        bashrc_path = os.path.join(home_dir, '.bashrc')
        
        # 检查是否已经添加过相同内容（避免重复添加）
        marker_start = f"# === EDA {eda_name} Configuration Start ==="
        marker_end = f"# === EDA {eda_name} Configuration End ==="
        
        # 读取现有 .bashrc 内容
        existing_content = ""
        if os.path.exists(bashrc_path):
            with open(bashrc_path, 'r') as f:
                existing_content = f.read()
        
        # 检查是否已经存在相同的配置
        if marker_start in existing_content:
            print(f"EDA {eda_name} 配置已存在于 .bashrc 中，跳过添加")
            return True
        
        # 准备要添加的内容
        new_content = f"\n{marker_start}\n{remote_bashrc_content}\n{marker_end}\n"
        
        # 附加到 .bashrc 文件
        with open(bashrc_path, 'a') as f:
            f.write(new_content)
        
        # 确保文件所有者正确
        import pwd
        user_info = pwd.getpwuid(1000)
        os.chown(bashrc_path, user_info.pw_uid, user_info.pw_gid)
        
        print(f"✓ 已将远程 .bashrc 内容添加到 {bashrc_path}")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"下载远程 .bashrc 失败: {e}")
        return False
    except Exception as e:
        print(f"配置 .bashrc 失败: {e}")
        return False

def handle_eda_command(eda_name):
    """处理 EDA 命令"""
    print(f"正在配置 EDA 环境: {eda_name}")
    
    # 1. 获取配置
    print("正在获取 EDA 配置...")
    config = fetch_eda_config(eda_name)
    
    # 2. 检查网络段
    network_segment = config.get('network_segment', '')
    if not network_segment:
        print("配置文件中缺少 network_segment 字段")
        sys.exit(1)
    
    print(f"检查网络段: {network_segment}")
    if not check_network_segment(network_segment):
        print(f"错误: 当前主机不在要求的网络段 {network_segment} 内")
        sys.exit(1)
    
    # 3. 生成 systemd 单元文件
    print("生成 systemd 单元文件...")
    service_content = generate_systemd_unit(eda_name, config)
    service_file = f"/etc/systemd/system/eda-{eda_name}.service"
    
    try:
        with open(service_file, 'w') as f:
            f.write(service_content)
        print(f"systemd 单元文件已创建: {service_file}")
    except PermissionError:
        print(f"权限不足，无法创建 {service_file}，请使用 sudo 运行")
        sys.exit(1)
    except Exception as e:
        print(f"创建 systemd 单元文件失败: {e}")
        sys.exit(1)
    
    # 4. 启用并启动服务
    print("启用并启动 systemd 服务...")
    reload_result = os.system("sudo systemctl daemon-reload")
    if reload_result != 0:
        print("systemctl daemon-reload 失败")
        sys.exit(1)
    
    enable_result = os.system(f"sudo systemctl enable --now eda-{eda_name}.service")
    if enable_result != 0:
        print(f"启用服务 eda-{eda_name}.service 失败")
        sys.exit(1)
    
    # 5. 验证挂载状态
    print("验证挂载状态...")
    nfs_mounts = config.get('nfs_mounts', [])
    if not verify_mounts(nfs_mounts):
        print(f"✗ EDA 环境 {eda_name} 配置失败，请检查是否加入课程网络")
        sys.exit(1)
    
    # 6. 下载并配置 .bashrc
    print("配置用户环境...")
    download_and_append_bashrc(eda_name)
    
    print(f"✓ EDA 环境 {eda_name} 配置成功！")
    print(f"可以使用 clabcli desktop 命令连接到桌面环境")

def install_shadowdesk():
    """
    支持的发行版：ubuntu 20.04, 22.04, 24.04; EL 7, 8, 9
    ubuntu：
    distribution=$(cat /etc/os-release | grep UBUNTU_CODENAME | cut -d = -f 2)
    sudo curl https://git.pku.edu.cn/api/packages/pkuhpc/debian/repository.key -o /etc/apt/keyrings/shadowdesk.asc
    echo "deb [signed-by=/etc/apt/keyrings/shadowdesk.asc] https://git.pku.edu.cn/api/packages/pkuhpc/debian $distribution main" | sudo tee -a /etc/apt/sources.list.d/shadowdesk.list
    sudo apt install shadowdesk

    el系：
    dnf config-manager --add-repo https://git.pku.edu.cn/api/packages/pkuhpc/rpm/el$(rpm -E %{rhel})
    dnf install shadowdesk
    """

    print("正在安装 shadowdesk...")

    supported_dists = {
        'ubuntu': ['20.04', '22.04', '24.04'],
        'el': ['7', '8', '9']
    }

    distro, version = detect_os()
    if not distro or not version:
        print("无法检测操作系统版本，请手动安装 shadowdesk。")
        return
    if distro not in supported_dists:
        print(f"当前操作系统 {distro} 不受支持，请手动安装 shadowdesk。")
        return 
    if version not in supported_dists[distro]:
        print(f"当前操作系统版本 {version} 不受支持，请手动安装 shadowdesk。")
        return
    print(f"检测到操作系统: {distro} {version}")

    if distro == 'ubuntu':
        distribution = os.popen("cat /etc/os-release | grep UBUNTU_CODENAME | cut -d = -f 2").read().strip()
        os.system(f"sudo curl https://git.pku.edu.cn/api/packages/pkuhpc/debian/repository.key -o /etc/apt/keyrings/shadowdesk.asc")
        os.system(f"echo 'deb [signed-by=/etc/apt/keyrings/shadowdesk.asc] https://git.pku.edu.cn/api/packages/pkuhpc/debian {distribution} main' | sudo tee -a /etc/apt/sources.list.d/shadowdesk.list")
        os.system("sudo apt update && sudo apt install shadowdesk")
    elif distro.startswith('el'):
        os.system(f"sudo dnf config-manager --add-repo https://git.pku.edu.cn/api/packages/pkuhpc/rpm/el{version}")
        os.system("sudo dnf install shadowdesk")

    print("shadowdesk 安装完成！")

def main():
    if len(sys.argv) < 2:
        print('''clabcli - PKU CLAB CLI Tools

命令:
  connect: 连接到北大网关
  disconnect: 断开网关连接
  desktop: 配置 shadowdesk 桌面环境
  eda <eda_name>: 配置 EDA 环境
''')
        return
    
    command = sys.argv[1]
    
    if command == 'eda':
        if len(sys.argv) != 3:
            print("用法: clabcli eda <eda_name>")
            print("例如: clabcli eda eda2025")
            return
        handle_eda_command(sys.argv[2])
        return
    elif command not in ['connect', 'c', 'disconnect', 'desktop']:
        print('''clabcli - PKU CLAB CLI Tools

命令:
  connect: 连接到北大网关
  disconnect: 断开网关连接
  desktop: 配置 shadowdesk 桌面环境
  eda <eda_name>: 配置 EDA 环境
''')
        return
        
    if sys.argv[1] == "disconnect":
        url = "https://its4.pku.edu.cn/cas/ITSClient"
        payload = {
            'cmd': 'close',
            'land': None
        }
        headers = {'Content-type': 'application/x-www-form-urlencoded'}

        result = requests.post(url, params=payload, headers=headers).json()
        if result.get("succ", False) == "close_OK":
            print("已断开网络！")
        else:
            print("发生错误: ", result["error"])
    
    elif sys.argv[1] == "desktop":
        config_path = get_user_config_path()
        if not os.path.exists(os.path.expanduser(config_path)):
            # copy default config file from /usr/share/clab/shadowdesk.env
            default_config_path = "/usr/share/clab/shadowdesk/shadowdesk.env.default"
            if not os.path.exists(os.path.expanduser(config_path)):
                if os.path.exists(default_config_path):
                    os.system(f"cp {default_config_path} {config_path}")
                else:
                    print("默认配置文件不存在，请手动安装 shadowdesk 或联系管理员。")
                    return
                
        with open(config_path, 'r') as f:
            content = f.read() 
        
        # if /opt/shadowdesk/bin/shadowdeskbin  not exists, user selects to install shadowdesk
        if not os.path.exists("/opt/shadowdesk/bin/shadowdeskbin"):
            print("未检测到 shadowdesk, 是否安装？(y/n)")
            choice = input().strip().lower()
            if choice == 'y':
                install_shadowdesk()
            else:
                print("请手动安装 shadowdesk")
                return
        
        if "REPLACE_ME_SHADOWDESK_USER_NAME" not in content and "REPLACE_ME_SHADOWDESK_USER_PASSWORD" not in content:
            print("账号密码已设置")
            # 从配置文件中读取用户名和密码
            # USER_ID=2019xxxx_hostname
            # USER_PASSWORD=xxxx
            user_id_line = [line for line in content.split('\n') if line.startswith("USER_ID=")][0]
            user_id = user_id_line.split('=')[1]
            password_line = [line for line in content.split('\n') if line.startswith("USER_PASSWORD=")][0]
            password = password_line.split('=')[1]
            print("请前往https://rdv2.lcpu.dev登录使用")
            print(f"用户名: {user_id}")
            print(f"密码: {password}")
            # ensure shadowxvfb@98 shadowgnome@98 shadowdesk@98 services are running
            os.system("sudo systemctl enable --now shadowxvfb@98 shadowgnome@98 shadowdesk@98")
            return
        student_id = input("请输入学号: ")
        hostname = os.popen("hostname").read().strip().split('.')[0]
        user_id = f"{student_id}_{hostname}"
        
        password = generate_password()
        
        print(f"\n生成的随机密码: {password}")
        
        if modify_shadowdesk_config(user_id, password):
            print("\n配置已成功修改！")
            print(f"用户名和密码已保存到 {os.path.expanduser('~')}/rd_password")
            print("请前往https://rdv2.lcpu.dev登录使用")
            print(f"用户名: {user_id}")
            print(f"密码: {password}")
        else:
            print("\n配置修改失败，请检查权限或文件路径。")
            
    elif sys.argv[1] in ['connect', 'c']:
        username = input("请输入学工号: ")
        password = getpass.getpass("请输入密码: ")

        url = "https://its4.pku.edu.cn/cas/ITSClient"
        payload = {
            'username': username,
            'password': password,
            'iprange': 'free',
            'cmd': 'open'
        }
        headers = {'Content-type': 'application/x-www-form-urlencoded'}

        result = requests.post(url, params=payload, headers=headers).json()
        if result.get("succ", False) != False:
            print("成功连接网络！")
        else:
            print("连接网关失败: ", result['error'])

if __name__ == "__main__":
    main()
